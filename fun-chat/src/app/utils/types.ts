/* Тип данных, который представляет конструкторы классов (или функции-конструкторы) для создания экземпляров типа T
конструктор принимает аргументы, которые могут быть не переданы (с помощью never[]), и возвращает тип T. 
Это означает, что конструктор может быть вызван без аргументов и создает экземпляр типа T. */
export type ConstructorOf<T> = { new (...args: never[]): T; prototype: T };

export type NullLike = null | undefined;
export type Nullable<T> = T | NullLike;

/** keyof - это ключевое слово TypeScript, которое возвращает объединение (union) строковых литералов, 
 * представляющих имена свойств объекта T.
T - это тип объекта или интерфейса, ключи которого мы хотим извлечь. */
export type ValueOf<T> = T[keyof T];

/* <T, K extends keyof T> - это обобщенные типы. 
T представляет тип объекта или интерфейса, к которому мы хотим добавить обязательные свойства, 
K представляет ключи этого типа T, которые мы хотим сделать обязательными. 
Ограничение K extends keyof T гарантирует, что K может быть только ключом T.
T & { [P in K]-?: T[P] };
& - это  пересечения типов. Он создает новый тип, который представляет собой объединение свойств и методов из типа T и других указанных типов.
{ [P in K]-?: T[P] } - это выражение для создания новых свойств сделанных обязательными (-?). 
Здесь P перебирает каждый ключ K, а T[P] возвращает тип значения для каждого ключа. 
Таким образом, мы создаем новый тип, где каждое свойство с ключом из K становится обязательным.
*/

// WithRequired<T, K> - это тип данных, который берет объект T и делает определенные ключи K обязательными, в результате создавая новый тип данных,
// где указанные свойства должны присутствовать при использовании этого типа.
export type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

/* Omit<T, K> представляет объект T без ключей K, делая их отсутствующими.
WithOptional<T, K> - это тип данных, который берет объект T и делает определенные ключи K необязательными,
в результате создавая новый тип данных, где указанные свойства могут быть или не быть при использовании этого типа. */
export type WithOptional<T, K extends keyof T> = Omit<T, K> & { [P in K]?: T[P] };

export type Callback<T> = (attr: T) => void | Promise<void>;
